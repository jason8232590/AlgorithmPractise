package com.dx.algorithmpractise.linkedlist;

/**
 * 实现LRU的大体思路
 * 1.维护一个单向有序链表，越靠近尾部的节点是越早访问的
 * 2.查询节点从头部开始
 * 3.如果节点存在于链表中，则删除该节点，然后头插
 * 4.如果该节点不存在于链表中，则需要头插
 *   4.1 如果链表长度没满，则直接头插
 *   4.2 如果链表长度满了，则删除尾部节点，然后进行头插
 *
 *   上面的时间复杂度都是O(n)
 *   可以继续优化，引入散列表来记录每个数据的位置，这样缓存的访问的时间复杂度可以降到O(1)
 * */
public class LRUCacheArray {
}
